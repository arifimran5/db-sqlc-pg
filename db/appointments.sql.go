// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: appointments.sql

package db

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createAppointment = `-- name: CreateAppointment :exec
INSERT INTO
    appointments (
        doctor_id,
        patient_id,
        appointment_date
    )
VALUES ($1, $2, $3)
`

type CreateAppointmentParams struct {
	DoctorID        int32
	PatientID       int32
	AppointmentDate pgtype.Date
}

func (q *Queries) CreateAppointment(ctx context.Context, arg CreateAppointmentParams) error {
	_, err := q.db.Exec(ctx, createAppointment, arg.DoctorID, arg.PatientID, arg.AppointmentDate)
	return err
}

const getAppointmentsByDoctor = `-- name: GetAppointmentsByDoctor :many
SELECT
    d.id AS doctor_id,
    d.name AS doctor_name,
    p.id AS patitent_id,
    p.name AS patient_name,
    p.age AS patient_age,
    a.appointment_date
FROM
    doctors d
    JOIN appointments a ON d.id = a.doctor_id
    JOIN patients p ON a.patient_id = p.id
WHERE
    d.id = $1
ORDER BY a.appointment_date
`

type GetAppointmentsByDoctorRow struct {
	DoctorID        int32
	DoctorName      string
	PatitentID      int32
	PatientName     string
	PatientAge      pgtype.Int4
	AppointmentDate pgtype.Date
}

func (q *Queries) GetAppointmentsByDoctor(ctx context.Context, id int32) ([]GetAppointmentsByDoctorRow, error) {
	rows, err := q.db.Query(ctx, getAppointmentsByDoctor, id)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetAppointmentsByDoctorRow
	for rows.Next() {
		var i GetAppointmentsByDoctorRow
		if err := rows.Scan(
			&i.DoctorID,
			&i.DoctorName,
			&i.PatitentID,
			&i.PatientName,
			&i.PatientAge,
			&i.AppointmentDate,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getAppointmentsByPatient = `-- name: GetAppointmentsByPatient :many
SELECT
    d.id AS doctor_id,
    d.name AS doctor_name,
    p.id AS patitent_id,
    p.name AS patient_name,
    p.age AS patient_age,
    a.appointment_date
FROM
    doctors d
    JOIN appointments a ON d.id = a.doctor_id
    JOIN patients p ON a.patient_id = p.id
WHERE
    p.id = $1
ORDER BY a.appointment_date
`

type GetAppointmentsByPatientRow struct {
	DoctorID        int32
	DoctorName      string
	PatitentID      int32
	PatientName     string
	PatientAge      pgtype.Int4
	AppointmentDate pgtype.Date
}

func (q *Queries) GetAppointmentsByPatient(ctx context.Context, id int32) ([]GetAppointmentsByPatientRow, error) {
	rows, err := q.db.Query(ctx, getAppointmentsByPatient, id)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetAppointmentsByPatientRow
	for rows.Next() {
		var i GetAppointmentsByPatientRow
		if err := rows.Scan(
			&i.DoctorID,
			&i.DoctorName,
			&i.PatitentID,
			&i.PatientName,
			&i.PatientAge,
			&i.AppointmentDate,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
